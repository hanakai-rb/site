# frozen_string_literal: true

require "hanami/boot"

# Patch Parklife so it doesn't consider URLs ending with e.g. "v2.0" as having an extname
require "parklife/utils"
Parklife::Utils.class_eval do
  def build_path_for(path, index: true)
    path = path.gsub(/^\/|\/$/, "")

    # This `if` line is what we've modified. Previously it was:
    #
    # if File.extname(path).empty?
    if (extname = File.extname(path)) && (extname.match?(/\.\d+$/) || extname.empty?)
      if path.empty?
        "index.html"
      elsif index
        File.join(path, "index.html")
      else
        "#{path}.html"
      end
    else
      path
    end
  end
end

# Patch Parklife crawler to handle errors gracefully
require "parklife/crawler"

Parklife.application.configure do |config|
  config.app = Site::App

  # Generate e.g. /nested/route.html instead of /nested/route/index.html. This will see Netlify
  # ensure there are no trailing slashes on URLs, which is consistent with our routing when serving
  # the live Hanami app.
  config.nested_index = false

  # Allow the build to proceed after encountering a 404
  config.on_404 = :warn
end

Parklife.application.routes do
  root crawl: true

  # Add further paths not discovered by crawling from the root:
  #
  # get '/hidden/pages', crawl: true
  # get '/feed.atom'

  # Services typically allow a custom 404 page.
  # get '/404.html'
end

# Build search index after Parkfile is loaded
# This will run during the build process
at_exit do
  if $!.nil? || $!.is_a?(SystemExit) && $!.success?
    # Only build search index if parklife build was successful
    if defined?(Parklife) && ARGV.include?("build")
      puts "\n==> Building Pagefind search index..."
      require "rake"
      require "fileutils"
      load File.expand_path("Rakefile", __dir__)

      # Update the search:build_index task to index the build directory
      # We need to temporarily override the task behavior
      puts "Indexing build directory..."
      FileUtils.mkdir_p("build")
      result = system("npx pagefind --site build")

      if result
        # Calculate total size of pagefind directory
        total_size = Dir.glob("build/pagefind/**/*")
          .select { |f| File.file?(f) }
          .sum { |f| File.size(f) }

        size_kb = (total_size / 1024.0).round(2)

        puts "✓ Pagefind index built successfully"
        puts "  - build/pagefind/"
        puts "  - Index size: #{size_kb}KB"
      else
        puts "✗ Failed to build Pagefind index"
        exit 1
      end
    end
  end
end
